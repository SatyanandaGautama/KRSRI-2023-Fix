
//
//void ambilK3() {
//  float deg1 = 225; //205 //190 new
//  float deg2 = 35; //75
//  float xFront = 53;
//  float yFront = 57;
//  float xBack = 58;
//  for (int i = 0; i <= 49; i++) {
//    FR7(xFront, yFront, 0, 0);
//    BR7(xBack, -55, 0, 0);
//    BL7(-(xBack), -55, 0, 0);
//    FL7(-(xFront), yFront, 0, 0);
//    dxl.setGoalPosition(14, deg1, UNIT_DEGREE);
//    pegangan.write(deg2);
//    deg1 -= 0.7;
//    deg2 += 0.8;
//    xFront -= 1,0252; //tujuan = 1.74
//    yFront += 0.9282; //tujuan = 103.41
//    xBack += 1.14; // tujuan = 115
//    delay(10);
//  }
//}
////==============IK Ambil Korban 3===============//
//void FR7(float x, float y, float h, float lebar) {
//  z = height + h;
//  if (x >= 0 && y >= 0) angle1 = round ((atan(y / x) * 57.296) + 180); //Kanan Atas
//  angle2 = round(angle1 - legoffset[0]) + 11; //6
//
//  if (angle2 > 195) sdtcoxa = angle2 + lebar;
//  if (angle2 == 195) sdtcoxa = angle2;
//  if (angle2 < 195) sdtcoxa = angle2 - lebar;
//
//  P = sqrt((x * x) + (y * y));
//  alas = P - cx;
//  c = sqrt((alas * alas) + (z * z));
//  alpha = atan(z / alas);
//  beta = acos((fm * fm + c * c - tb * tb) / (2 * fm * c));
//  theta2 = alpha + beta;
//  sdtfemur = 90 + round ((theta2 * 57.296)) + 72; //71
//
//  theta3 = acos((tb * tb + fm * fm - c * c) / (2 * tb * fm));
//  sdttibia = (90 - (round((theta3 * 57.296) - 90))) + 142; //139
//  kanan_atas(sdtcoxa, sdtfemur, sdttibia);
//  // Serial.println("FRONT RIGHT :");
//  // Serial.print("CX :");
//  // Serial.println(sdtcoxa);
//  // Serial.print("FM :");
//  // Serial.println(sdtfemur);
//  // Serial.print("TB :");
//  // Serial.println(sdttibia);
//}
//
//void FL7(float x, float y, float h, float lebar) { //105
//  z = height + h;
//  if (x < 0 && y >= 0) angle1 = round (180 + (atan(y / x) * 57.296) + 90); //Kiri Atas
//  angle2 = round(angle1 - legoffset[1]) + 13; //18
//
//  if (arahgerak == true) { //Maju & Mundur
//    if (angle2 > 105) sdtcoxa = angle2 - lebar;
//    if (angle2 < 105) sdtcoxa = angle2 + lebar;
//    if (angle2 == 105) sdtcoxa = angle2;
//  }
//  if (arahgerak == false) { //Geser Kanan & Kiri
//    if (angle2 > 105) sdtcoxa = angle2 + lebar;
//    if (angle2 < 105) sdtcoxa = angle2 - lebar;
//    if (angle2 == 105) sdtcoxa = angle2;
//  }
//
//  P = sqrt((x * x) + (y * y));
//  alas = P - cx;
//  c = sqrt((alas * alas) + (z * z));
//  alpha = atan(z / alas);
//  beta = acos((fm * fm + c * c - tb * tb) / (2 * fm * c));
//  theta2 = alpha + beta;
//  sdtfemur = 90 + round ((theta2 * 57.296)) + 73; //74
//
//  theta3 = acos((tb * tb + fm * fm - c * c) / (2 * tb * fm));
//  sdttibia = (90 - (round((theta3 * 57.296) - 90))) + 150; //146
//  kiri_atas(sdtcoxa, sdtfemur, sdttibia);
//  // Serial.println("FRONT LEFT :");
//  // Serial.print("CX :");
//  // Serial.println(sdtcoxa);
//  // Serial.print("FM :");
//  // Serial.println(sdtfemur);
//  // Serial.print("TB :");
//  // Serial.println(sdttibia);
//}
//
//void BL7(float x, float y, float h, float lebar) { //195
//  z = height2 + h;
//  if (x < 0 && y < 0) angle1 = round (180 + (atan(y / x) * 57.296) + 180); //Kiri Bawah
//  angle2 = round(angle1 - legoffset[2]) + 10; //10
//
//  if (angle2 < 195) sdtcoxa = angle2 + lebar;
//  if (angle2 > 195) sdtcoxa = angle2 - lebar;
//  if (angle2 == 195) sdtcoxa = angle2;
//
//  P = sqrt((x * x) + (y * y));
//  alas = P - cx;
//  c = sqrt((alas * alas) + (z * z));
//
//  alpha = atan(z / alas);
//  beta = acos((fm * fm + c * c - tb * tb) / (2 * fm * c));
//  theta2 = alpha + beta;
//  sdtfemur = 90 + round ((theta2 * 57.296)) + 72; //72
//
//  theta3 = acos((tb * tb + fm * fm - c * c) / (2 * tb * fm));
//  sdttibia = (90 - (round((theta3 * 57.296) - 90))) + 150; //149
//  kiri_bawah(sdtcoxa, sdtfemur, sdttibia);
//  // Serial.println("BACK LEFT :");
//  // Serial.print("CX :");
//  // Serial.println(sdtcoxa);
//  // Serial.print("FM :");
//  // Serial.println(sdtfemur);
//  // Serial.print("TB :");
//  // Serial.println(sdttibia);
//}
//
//void BR7(float x, float y, float h, float lebar) { //105
//  z = height2 + h;
//  if (x >= 0 && y < 0) angle1 = round (360 + (atan(y / x) * 57.296) + 90); //Kanan Bawah
//  angle2 = round(angle1 - legoffset[3]) + 15; //15
//
//  if (arahgerak == true) { //maju mundur
//    if (angle2 < 105) sdtcoxa = angle2 - lebar;
//    if (angle2 > 105) sdtcoxa = angle2 + lebar;
//    if (angle2 == 105) sdtcoxa = angle2;
//  }
//  if (arahgerak == false) { //geser kanan kiri
//    if (angle2 > 105) sdtcoxa = angle2 - lebar;
//    if (angle2 < 105) sdtcoxa = angle2 + lebar;
//    if (angle2 == 105) sdtcoxa = angle2;
//  }
//
//  // if (angle2 < 105) sdtcoxa = angle2 - lebar;
//  // if (angle2 > 105) sdtcoxa = angle2 + lebar;
//  // if (angle2 == 105) sdtcoxa = angle2;
//
//  P = sqrt((x * x) + (y * y));
//  alas = P - cx;
//  c = sqrt((alas * alas) + (z * z));
//  alpha = atan(z / alas);
//  beta = acos((fm * fm + c * c - tb * tb) / (2 * fm * c));
//  theta2 = alpha + beta;
//  sdtfemur = 90 + round ((theta2 * 57.296)) + 71; //72
//
//  theta3 = acos((tb * tb + fm * fm - c * c) / (2 * tb * fm));
//  sdttibia = (90 - (round((theta3 * 57.296) - 90))) + 137; //138
//  kanan_bawah(sdtcoxa, sdtfemur, sdttibia);
//  // Serial.println("BACK RIGHT :");
//  // Serial.print("CX :");
//  // Serial.println(sdtcoxa);
//  // Serial.print("FM :");
//  // Serial.println(sdtfemur);
//  // Serial.print("TB :");
//  // Serial.println(sdttibia);
//}
////==============IK Ambil Korban 3===============//
//
////==========Invers Gerak Korban 3=========//
//void FR8(float x, float y, float h, float lebar) {
//  z = height + h;
//  if (x >= 0 && y >= 0) angle1 = round ((atan(y / x) * 57.296) + 180); //Kanan Atas
//  angle2 = round(angle1 - legoffset[0]) + 11; //6
//
//  if (angle2 > 195) sdtcoxa = angle2 + lebar;
//  if (angle2 == 195) sdtcoxa = angle2;
//  if (angle2 < 195) sdtcoxa = angle2 - lebar;
//
//  P = sqrt((x * x) + (y * y));
//  alas = P - cx;
//  c = sqrt((alas * alas) + (z * z));
//  alpha = atan(z / alas);
//  beta = acos((fm * fm + c * c - tb * tb) / (2 * fm * c));
//  theta2 = alpha + beta;
//  sdtfemur = 90 + round ((theta2 * 57.296)) + 72; //71
//
//  theta3 = acos((tb * tb + fm * fm - c * c) / (2 * tb * fm));
//  sdttibia = (90 - (round((theta3 * 57.296) - 90))) + 139; //139
//  kanan_atas(sdtcoxa, sdtfemur, sdttibia);
//  // Serial.println("FRONT RIGHT :");
//  // Serial.print("CX :");
//  // Serial.println(sdtcoxa);
//  // Serial.print("FM :");
//  // Serial.println(sdtfemur);
//  // Serial.print("TB :");
//  // Serial.println(sdttibia);
//}
//
//void FL8(float x, float y, float h, float lebar) { //105
//  z = height + h;
//  if (x < 0 && y >= 0) angle1 = round (180 + (atan(y / x) * 57.296) + 90); //Kiri Atas
//  angle2 = round(angle1 - legoffset[1]) + 13; //18
//
//  if (arahgerak == true) { //Maju & Mundur
//    if (angle2 > 105) sdtcoxa = angle2 - lebar;
//    if (angle2 < 105) sdtcoxa = angle2 + lebar;
//    if (angle2 == 105) sdtcoxa = angle2;
//  }
//  if (arahgerak == false) { //Geser Kanan & Kiri
//    if (angle2 > 105) sdtcoxa = angle2 + lebar;
//    if (angle2 < 105) sdtcoxa = angle2 - lebar;
//    if (angle2 == 105) sdtcoxa = angle2;
//  }
//
//  P = sqrt((x * x) + (y * y));
//  alas = P - cx;
//  c = sqrt((alas * alas) + (z * z));
//  alpha = atan(z / alas);
//  beta = acos((fm * fm + c * c - tb * tb) / (2 * fm * c));
//  theta2 = alpha + beta;
//  sdtfemur = 90 + round ((theta2 * 57.296)) + 72; //74
//
//  theta3 = acos((tb * tb + fm * fm - c * c) / (2 * tb * fm));
//  sdttibia = (90 - (round((theta3 * 57.296) - 90))) + 146; //146
//  kiri_atas(sdtcoxa, sdtfemur, sdttibia);
//  // Serial.println("FRONT LEFT :");
//  // Serial.print("CX :");
//  // Serial.println(sdtcoxa);
//  // Serial.print("FM :");
//  // Serial.println(sdtfemur);
//  // Serial.print("TB :");
//  // Serial.println(sdttibia);
//}
//
//void BL8(float x, float y, float h, float lebar) { //195
//  z = height2 + h;
//  if (x < 0 && y < 0) angle1 = round (180 + (atan(y / x) * 57.296) + 180); //Kiri Bawah
//  angle2 = round(angle1 - legoffset[2]) + 10; //10
//
//  if (angle2 < 195) sdtcoxa = angle2 + lebar;
//  if (angle2 > 195) sdtcoxa = angle2 - lebar;
//  if (angle2 == 195) sdtcoxa = angle2;
//
//  P = sqrt((x * x) + (y * y));
//  alas = P - cx;
//  c = sqrt((alas * alas) + (z * z));
//
//  alpha = atan(z / alas);
//  beta = acos((fm * fm + c * c - tb * tb) / (2 * fm * c));
//  theta2 = alpha + beta;
//  sdtfemur = 90 + round ((theta2 * 57.296)) + 72; //72
//
//  theta3 = acos((tb * tb + fm * fm - c * c) / (2 * tb * fm));
//  sdttibia = (90 - (round((theta3 * 57.296) - 90))) + 146; //149
//  kiri_bawah(sdtcoxa, sdtfemur, sdttibia);
//  // Serial.println("BACK LEFT :");
//  // Serial.print("CX :");
//  // Serial.println(sdtcoxa);
//  // Serial.print("FM :");
//  // Serial.println(sdtfemur);
//  // Serial.print("TB :");
//  // Serial.println(sdttibia);
//}
//
//void BR8(float x, float y, float h, float lebar) { //105
//  z = height2 + h;
//  if (x >= 0 && y < 0) angle1 = round (360 + (atan(y / x) * 57.296) + 90); //Kanan Bawah
//  angle2 = round(angle1 - legoffset[3]) + 15; //15
//
//  if (arahgerak == true) { //maju mundur
//    if (angle2 < 105) sdtcoxa = angle2 - lebar;
//    if (angle2 > 105) sdtcoxa = angle2 + lebar;
//    if (angle2 == 105) sdtcoxa = angle2;
//  }
//  if (arahgerak == false) { //geser kanan kiri
//    if (angle2 > 105) sdtcoxa = angle2 - lebar;
//    if (angle2 < 105) sdtcoxa = angle2 + lebar;
//    if (angle2 == 105) sdtcoxa = angle2;
//  }
//
//  // if (angle2 < 105) sdtcoxa = angle2 - lebar;
//  // if (angle2 > 105) sdtcoxa = angle2 + lebar;
//  // if (angle2 == 105) sdtcoxa = angle2;
//
//  P = sqrt((x * x) + (y * y));
//  alas = P - cx;
//  c = sqrt((alas * alas) + (z * z));
//  alpha = atan(z / alas);
//  beta = acos((fm * fm + c * c - tb * tb) / (2 * fm * c));
//  theta2 = alpha + beta;
//  sdtfemur = 90 + round ((theta2 * 57.296)) + 72; //72
//
//  theta3 = acos((tb * tb + fm * fm - c * c) / (2 * tb * fm));
//  sdttibia = (90 - (round((theta3 * 57.296) - 90))) + 138; //138
//  kanan_bawah(sdtcoxa, sdtfemur, sdttibia);
//  // Serial.println("BACK RIGHT :");
//  // Serial.print("CX :");
//  // Serial.println(sdtcoxa);
//  // Serial.print("FM :");
//  // Serial.println(sdtfemur);
//  // Serial.print("TB :");
//  // Serial.println(sdttibia);
//}
////================Invers Gerak Korban 3============//
//
//void mundurdikitK3() {
//  //  arahgerak = false;
//  movecounter++;
//  if (movecounter == 1) {
//    FR8(55, 55, 35, 0);
//    BL8(-55, -55, 35, 0);
//    FL8(-55, 55, 0, 0);
//    BR8(55, -55, 0, 0);
//    delay(tk2);
//
//    FR8(47.78, 55, 31.11, 0);
//    BL8(-62.22, -55, 31.11, 0);
//    FL8(-55.45, 55, 0, 0);
//    BR8(54.55, -55, 0, 0);
//    delay(tk2);
//
//    FR8(42.22, 55, 19.44, 0);
//    BL8(-67.78, -55, 19.44, 0);
//    FL8(-55.9, 55, 0, 0);
//    BR8(54.1, -55, 0, 0);
//    delay(tk2);
//
//    FR8(41.03, 55, 11.85, 0);
//    BL8(-68.97, -55, 11.85, 0);
//    FL8(-56.15, 55, 0, 0);
//    BR8(53.85, -55, 0, 0);
//    delay(tk2);
//
//    FR8(40.27, 55, 7.3, 0);
//    BL8(-69.73, -55, 7.3, 0);
//    FL8(-56.25, 55, 0, 0);
//    BR8(53.75, -55, 0, 0);
//    delay(tk2);
//
//    FR8(40, 55, 0, 0);
//    BL8(-70, -55, 0, 0);
//    FL8(-56.35, 55, 0, 0);
//    BR8(53.65, -55, 0, 0);
//    delay(tk2);
//
/////////////////////////////////////////////////
//
//    FR8(40.34, 55, 0, 0);
//    BL8(-69.66, -55, 0, 0);
//    FL8(-58.03, 55, 0, 0);
//    BR8(51.97, -55, 0, 0);
//    delay(tk2);
//
//    FR8(41.28, 55, 0, 0);
//    BL8(-68.72, -55, 0, 0);
//    FL8(-58.97, 55, 0, 0);
//    BR8(51.03, -55, 0, 0);
//    delay(tk2);
//
//    FR8(42.66, 55, 0, 0);
//    BL8(-67.34, -55, 0, 0);
//    FL8(-60.35, 55, 0, 0);
//    BR8(49.65, -55, 0, 0);
//    delay(tk2);
//
//    FR8(44.33, 55, 0, 0);
//    BL8(-65.67, -55, 0, 0);
//    FL8(-62.02, 55, 0, 0);
//    BR8(47.98, -55, 0, 0);
//    delay(tk2);
//
//    FR8(46.16, 55, 0, 0);
//    BL8(-63.84, -55, 0, 0);
//    FL8(-63.84, 55, 0, 0);
//    BR8(46.16, -55, 0, 0);
//    delay(tk2);
//
//    FR8(47.98, 55, 0, 0);
//    BL8(-62.02, -55, 0, 0);
//    FL8(-65.67, 55, 0, 0);
//    BR8(44.33, -55, 0, 0);
//    delay(tk2);
//
//    FR8(49.65, 55, 0, 0);
//    BL8(-60.35, -55, 0, 0);
//    FL8(-67.34, 55, 0, 0);
//    BR8(42.66, -55, 0, 0);
//    delay(tk2);
//
//    FR8(51.03, 55, 0, 0);
//    BL8(-58.97, -55, 0, 0);
//    FL8(-68.72, 55, 0, 0);
//    BR8(41.28, -55, 0, 0);
//    delay(tk2);
//
//    FR8(52.65, 55, 0, 0);
//    BL8(-57.35, -55, 0, 0);
//    FL8(-69.66, 55, 0, 0);
//    BR8(40.34, -55, 0, 0);
//    delay(tk2);
//    
/////////////////////////////////////////////////
//    FR8(53.65, 55, 0, 0);
//    BL8(-56.35, -55, 0, 0);
//    FL8(-70, 55, 0, 0);
//    BR8(40, -55, 0, 0);
//    delay(tk2);
////////////////////////////////////////////////
//
//    FR8(54.1, 55, 0, 0);
//    BL8(-55.9, -55, 0, 0);
//    FL8(-67.78, 55, 19.44, 0);
//    BR8(42.22, -55, 19.44, 0);
//    delay(tk2);
//
//    FR8(54.55, 55, 0, 0);
//    BL8(-55.45, -55, 0, 0);
//    FL8(-62.22, 55, 31.11, 0);
//    BR8(47.78, -55, 31.11, 0);
//    delay(tk2);
//  }
//  else if (movecounter == 2) {
//    FR8(55,  55, 0, 0);
//    BL8(-55, -55, 0, 0);
//    FL8(-55, 55, 35, 0);
//    BR8(55, -55, 35, 0);
//    delay(tk2);
//
//    FR8(55.45, 55, 0, 0);
//    BL8(-54.55, -55, 0, 0);
//    FL8(-47.78, 55, 31.11, 0);
//    BR8(62.22, -55, 31.11, 0);
//    delay(tk2);
//
//    FR8(55.9, 55, 0, 0);
//    BL8(-54.1, -55, 0, 0);
//    FL8(-42.22, 55, 19.44, 0);
//    BR8(67.78, -55, 19.44, 0);
//    delay(tk2);
//
//    FR8(56.15, 55, 0, 0);
//    BL8(-53.85, -55, 0, 0);
//    FL8(-41.03, 55, 11.85, 0);
//    BR8(68.97, -55, 11.85, 0);
//    delay(tk2);
//
//    FR8(56.25, 55, 0, 0);
//    BL8(-53.75, -55, 0, 0);
//    FL8(-40.27, 55, 7.3, 0);
//    BR8(69.73, -55, 7.3, 0);
//    delay(tk2);
//
//    FR8(56.35, 55, 0, 0);
//    BL8(-53.65, -55, 0, 0);
//    FL8(-40, 55, 0, 0);
//    BR8(70, -55, 0, 0);
//    delay(tk2);
//
/////////////////////////////////////////////
//    FR8(58.03, 55, 0, 0);
//    BL8(-51.97, -55, 0, 0);
//    FL8(-40.34, 55, 0, 0);
//    BR8(69.66, -55, 0, 0);
//    delay(tk2);
//
//    FR8(58.97, 55, 0, 0);
//    BL8(-51.03, -55, 0, 0);
//    FL8(-41.28, 55, 0, 0);
//    BR8(68.72, -55, 0, 0);
//    delay(tk2);
//
//    FR8(60.35, 55, 0, 0);
//    BL8(-49.65, -55, 0, 0);
//    FL8(-42.66, 55, 0, 0);
//    BR8(67.34, -55, 0, 0);
//    delay(tk2);
//
//    FR8(62.02, 55, 0, 0);
//    BL8(-47.98, -55, 0, 0);
//    FL8(-44.33, 55, 0, 0);
//    BR8(65.67, -55, 0, 0);
//    delay(tk2);
//
//    FR8(63.84, 55, 0, 0);
//    BL8(-46.16, -55, 0, 0);
//    FL8(-46.16, 55, 0, 0);
//    BR8(63.84, -55, 0, 0);
//    delay(tk2);
//
//    FR8(65.67, 55, 0, 0);
//    BL8(-44.33, -55, 0, 0);
//    FL8(-47.98, 55, 0, 0);
//    BR8(62.02, -55, 0, 0);
//    delay(tk2);
//
//    FR8(67.34, 55, 0, 0);
//    BL8(-42.66, -55, 0, 0);
//    FL8(-49.65, 55, 0, 0);
//    BR8(60.35, -55, 0, 0);
//    delay(tk2);
//
//    FR8(68.72, 55, 0, 0);
//    BL8(-41.28, -55, 0, 0);
//    FL8(-51.03, 55, 0, 0);
//    BR8(58.97, -55, 0, 0);
//    delay(tk2);
//
//    FR8(69.66, 55, 0, 0);
//    BL8(-40.34, -55, 0, 0);
//    FL8(-52.65, 55, 0, 0);
//    BR8(57.35, -55, 0, 0);
//    delay(tk2);
//
////////////////////////////////////////////
//
//    FR8(70, 55, 0, 0);
//    BL8(-40, -55, 0, 0);
//    FL8(-53.65, 55, 0, 0);
//    BR8(56.35, -55, 0, 0);
//    delay(tk2);
//
//    FR8(67.78, 55, 19.44, 0);
//    BL8(-42.22, -55, 19.44, 0);
//    FL8(-54.1, 55, 0, 0);
//    BR8(55.9, -55, 0, 0);
//    delay(tk2);
//
//    FR8(62.22, 55, 31.11, 0);
//    BL8(-47.78, -55, 31.11, 0);
//    FL8(-54.55, 55, 0, 0);
//    BR8(55.45, -55, 0, 0);
//    delay(tk2);
//    movecounter = 0;
//  }
//}
//
//void majudikitK3() {
//  //  arahgerak = false;
//  movecounter++;
//  if (movecounter == 1) {
//    FR8(55, 55, 35, 0);
//    BL8(-55, -55, 35, 0);
//    FL8(-55, 55, 0, 0);
//    BR8(55, -55, 0, 0);
//    delay(tk2);
//
//    FR8(62.22, 55, 31.11, 0);
//    BL8(-47.78, -55, 31.11, 0);
//    FL8(-54.55, 55, 0, 0);
//    BR8(55.45, -55, 0, 0);
//    delay(tk2);
//
//    FR8(67.78, 55, 19.44, 0);
//    BL8(-42.22, -55, 19.44, 0);
//    FL8(-54.1, 55, 0, 0);
//    BR8(55.9, -55, 0, 0);
//    delay(tk2);
//
//    FR8(68.97, 55, 11.85, 0);
//    BL8(-41.03, -55, 11.85, 0);
//    FL8(-53.85, 55, 0, 0);
//    BR8(56.15, -55, 0, 0);
//    delay(tk2);
//
//    FR8(69.73, 55, 7.3, 0);
//    BL8(-40.27, -55, 7.3, 0);
//    FL8(-53.75, 55, 0, 0);
//    BR8(56.25, -55, 0, 0);
//    delay(tk2);
//
//    FR8(70, 55, 0, 0);
//    BL8(-40, -55, 0, 0);
//    FL8(-53.65, 55, 0, 0);
//    BR8(56.35, -55, 0, 0);
//    delay(tk2);
//
/////////////////////////////////////////////////
//
//    FR8(69.66, 55, 0, 0);
//    BL8(-40.34, -55, 0, 0);
//    FL8(-51.97, 55, 0, 0);
//    BR8(58.03, -55, 0, 0);
//    delay(tk2);
//
//    FR8(68.72, 55, 0, 0);
//    BL8(-41.28, -55, 0, 0);
//    FL8(-51.03, 55, 0, 0);
//    BR8(58.97, -55, 0, 0);
//    delay(tk2);
//
//    FR8(67.34, 55, 0, 0);
//    BL8(-42.66, -55, 0, 0);
//    FL8(-49.65, 55, 0, 0);
//    BR8(60.35, -55, 0, 0);
//    delay(tk2);
//
//    FR8(65.67, 55, 0, 0);
//    BL8(-44.33, -55, 0, 0);
//    FL8(-47.98, 55, 0, 0);
//    BR8(62.02, -55, 0, 0);
//    delay(tk2);
//
//    FR8(63.84, 55, 0, 0);
//    BL8(-46.16, -55, 0, 0);
//    FL8(-46.16, 55, 0, 0);
//    BR8(63.84, -55, 0, 0);
//    delay(tk2);
//
//    FR8(62.02, 55, 0, 0);
//    BL8(-47.98, -55, 0, 0);
//    FL8(-44.33, 55, 0, 0);
//    BR8(65.67, -55, 0, 0);
//    delay(tk2);
//
//    FR8(60.35, 55, 0, 0);
//    BL8(-49.65, -55, 0, 0);
//    FL8(-42.66, 55, 0, 0);
//    BR8(67.34, -55, 0, 0);
//    delay(tk2);
//
//    FR8(58.97, 55, 0, 0);
//    BL8(-51.03, -55, 0, 0);
//    FL8(-41.28, 55, 0, 0);
//    BR8(68.72, -55, 0, 0);
//    delay(tk2);
//
//    FR8(57.35, 55, 0, 0);
//    BL8(-52.65, -55, 0, 0);
//    FL8(-40.34, 55, 0, 0);
//    BR8(69.66, -55, 0, 0);
//    delay(tk2);
//    
/////////////////////////////////////////////////
//    FR8(56.35, 55, 0, 0);
//    BL8(-53.65, -55, 0, 0);
//    FL8(-40, 55, 0, 0);
//    BR8(70, -55, 0, 0);
//    delay(tk2);
////////////////////////////////////////////////
//
//    FR8(55.9, 55, 0, 0);
//    BL8(-54.1, -55, 0, 0);
//    FL8(-42.22, 55, 19.44, 0);
//    BR8(67.78, -55, 19.44, 0);
//    delay(tk2);
//
//    FR8(55.45, 55, 0, 0);
//    BL8(-54.55, -55, 0, 0);
//    FL8(-47.78, 55, 31.11, 0);
//    BR8(62.22, -55, 31.11, 0);
//    delay(tk2);
//  }
//  else if (movecounter == 2) {
//    FR8(55,  55, 0, 0);
//    BL8(-55, -55, 0, 0);
//    FL8(-55, 55, 35, 0);
//    BR8(55, -55, 35, 0);
//    delay(tk2);
//
//    FR8(54.55, 55, 0, 0);
//    BL8(-55.45, -55, 0, 0);
//    FL8(-62.22, 55, 31.11, 0);
//    BR8(47.78, -55, 31.11, 0);
//    delay(tk2);
//
//    FR8(54.1, 55, 0, 0);
//    BL8(-55.9, -55, 0, 0);
//    FL8(-67.78, 55, 19.44, 0);
//    BR8(42.22, -55, 19.44, 0);
//    delay(tk2);
//
//    FR8(53.85, 55, 0, 0);
//    BL8(-56.15, -55, 0, 0);
//    FL8(-68.97, 55, 11.85, 0);
//    BR8(41.03, -55, 11.85, 0);
//    delay(tk2);
//
//    FR8(53.75, 55, 0, 0);
//    BL8(-56.25, -55, 0, 0);
//    FL8(-69.73, 55, 7.3, 0);
//    BR8(40.27, -55, 7.3, 0);
//    delay(tk2);
//
//    FR8(53.65, 55, 0, 0);
//    BL8(-56.35, -55, 0, 0);
//    FL8(-70, 55, 0, 0);
//    BR8(40, -55, 0, 0);
//    delay(tk2);
//
/////////////////////////////////////////////
//    FR8(51.97, 55, 0, 0);
//    BL8(-58.03, -55, 0, 0);
//    FL8(-69.66, 55, 0, 0);
//    BR8(40.34, -55, 0, 0);
//    delay(tk2);
//
//    FR8(51.03, 55, 0, 0);
//    BL8(-58.97, -55, 0, 0);
//    FL8(-68.72, 55, 0, 0);
//    BR8(41.28, -55, 0, 0);
//    delay(tk2);
//
//    FR8(49.65, 55, 0, 0);
//    BL8(-60.35, -55, 0, 0);
//    FL8(-67.34, 55, 0, 0);
//    BR8(42.66, -55, 0, 0);
//    delay(tk2);
//
//    FR8(47.98, 55, 0, 0);
//    BL8(-62.02, -55, 0, 0);
//    FL8(-65.67, 55, 0, 0);
//    BR8(44.33, -55, 0, 0);
//    delay(tk2);
//
//    FR8(46.16, 55, 0, 0);
//    BL8(-63.84, -55, 0, 0);
//    FL8(-63.84, 55, 0, 0);
//    BR8(46.16, -55, 0, 0);
//    delay(tk2);
//
//    FR8(44.33, 55, 0, 0);
//    BL8(-65.67, -55, 0, 0);
//    FL8(-62.02, 55, 0, 0);
//    BR8(47.98, -55, 0, 0);
//    delay(tk2);
//
//    FR8(42.66, 55, 0, 0);
//    BL8(-67.34, -55, 0, 0);
//    FL8(-60.35, 55, 0, 0);
//    BR8(49.65, -55, 0, 0);
//    delay(tk2);
//
//    FR8(41.28, 55, 0, 0);
//    BL8(-68.72, -55, 0, 0);
//    FL8(-58.97, 55, 0, 0);
//    BR8(51.03, -55, 0, 0);
//    delay(tk2);
//
//    FR8(40.34, 55, 0, 0);
//    BL8(-69.66, -55, 0, 0);
//    FL8(-57.35, 55, 0, 0);
//    BR8(52.65, -55, 0, 0);
//    delay(tk2);
//
////////////////////////////////////////////
//
//    FR8(40, 55, 0, 0);
//    BL8(-70, -55, 0, 0);
//    FL8(-56.35, 55, 0, 0);
//    BR8(53.65, -55, 0, 0);
//    delay(tk2);
//
//    FR8(42.22, 55, 19.44, 0);
//    BL8(-67.78, -55, 19.44, 0);
//    FL8(-55.9, 55, 0, 0);
//    BR8(54.1, -55, 0, 0);
//    delay(tk2);
//
//    FR8(47.78, 55, 31.11, 0);
//    BL8(-62.22, -55, 31.11, 0);
//    FL8(-55.45, 55, 0, 0);
//    BR8(54.55, -55, 0, 0);
//    delay(tk2);
//    movecounter = 0;
//  }
//}
//
//void kanandikitK3() {
//  movecounter++;
//  if (movecounter == 1) {
//    FR8(55, 55, 35, 0);
//    BL8(-55, -55, 35, 0);
//    FL8(-55, 55, 0, 0);
//    BR8(55, -55, 0, 0);
//    delay(tk2);
//
//    FR8(55, 62.22, 31.11, 0);
//    BL8(-55, -47.78, 31.11, 0);
//    FL8(-55, 55.45, 0, 0);
//    BR8(55, -54.55, 0, 0);
//    delay(tk2);
//
//    FR8(55, 67.78, 19.44, 0);
//    BL8(-55, -42.22, 19.44, 0);
//    FL8(-55, 55.9, 0, 0);
//    BR8(55, -54.1, 0, 0);
//    delay(tk2);
//
//    FR8(55, 68.97, 11.85, 0);
//    BL8(-55, -41.03, 11.85, 0);
//    FL8(-55, 56.15, 0, 0);
//    BR8(55, -53.85, 0, 0);
//    delay(tk2);
//
//    FR8(55, 69.73, 7.3, 0);
//    BL8(-55, -40.27, 7.3, 0);
//    FL8(-55, 56.25, 0, 0);
//    BR8(55, -53.75, 0, 0);
//    delay(tk2);
//
//
//    FR8(55, 70, 0, 0);
//    BL8(-55, -40, 0, 0);
//    FL8(-55, 56.35, 0, 0);
//    BR8(55, -53.65, 0, 0);
//    delay(tk2);
//
/////////////////////////////////////////////////
//
//    FR8(55, 69.66, 0, 0);
//    BL8(-55, -40.34, 0, 0);
//    FL8(-55, 58.03, 0, 0);
//    BR8(55, -51.97, 0, 0);
//    delay(tk2);
//
//    FR8(55, 68.72, 0, 0);
//    BL8(-55, -41.28, 0, 0);
//    FL8(-55, 58.97, 0, 0);
//    BR8(55, -51.03, 0, 0);
//    delay(tk2);
//
//    FR8(55, 67.34, 0, 0);
//    BL8(-55, -42.66, 0, 0);
//    FL8(-55, 60.35, 0, 0);
//    BR8(55, -49.65, 0, 0);
//    delay(tk2);
///////
//    FR8(55, 65.67, 0, 0);
//    BL8(-55, -44.33, 0, 0);
//    FL8(-55, 62.02, 0, 0);
//    BR8(55, -47.98, 0, 0);
//    delay(tk2);
//
//    FR8(55, 63.84, 0, 0);
//    BL8(-55, -46.16, 0, 0);
//    FL8(-55, 63.84, 0, 0);
//    BR8(55, -46.16, 0, 0);
//    delay(tk2);
//
//    FR8(55, 62.02, 0, 0);
//    BL8(-55, -47.98, 0, 0);
//    FL8(-55, 65.67, 0, 0);
//    BR8(55, -44.33, 0, 0);
//    delay(tk2);
//
//    FR8(55, 60.35, 0, 0);
//    BL8(-55, -49.65, 0, 0);
//    FL8(-55, 67.34, 0, 0);
//    BR8(55, -42.66, 0, 0);
//    delay(tk2);
//
//    FR8(55, 58.97, 0, 0);
//    BL8(-55, -51.03, 0, 0);
//    FL8(-55, 68.72, 0, 0);
//    BR8(55, -41.28, 0, 0);
//    delay(tk2);
//
//    FR8(55, 57.35, 0, 0);
//    BL8(-55, -52.65, 0, 0);
//    FL8(-55, 69.66, 0, 0);
//    BR8(55, -40.34, 0, 0);
//    delay(tk2);
//    
/////////////////////////////////////////////////
//    FR8(55, 56.35, 0, 0);
//    BL8(-55, -53.65, 0, 0);
//    FL8(-55, 70, 0, 0);
//    BR8(55, -40, 0, 0);
//    delay(tk2);
////////////////////////////////////////////////
//
//    FR8(55, 55.9, 0, 0);
//    BL8(-55, -54.1, 0, 0);
//    FL8(-55, 67.78, 19.44, 0);
//    BR8(55, -42.22, 19.44, 0);
//    delay(tk2);
//
//    FR8(55, 55.45, 0, 0);
//    BL8(-55, -54.55, 0, 0);
//    FL8(-55, 62.22, 31.11, 0);
//    BR8(55, -47.78, 31.11, 0);
//    delay(tk2);
//  }
//  else if (movecounter == 2) {
//    FR8(55,  55, 0, 0);
//    BL8(-55, -55, 0, 0);
//    FL8(-55, 55, 35, 0);
//    BR8(55, -55, 35, 0);
//    delay(tk2);
//
//    FR8(55, 54.55, 0, 0);
//    BL8(-55, -55.45, 0, 0);
//    FL8(-55, 47.78, 31.11, 0);
//    BR8(55, -62.22, 31.11, 0);
//    delay(tk2);
//
//    FR8(55, 54.1, 0, 0);
//    BL8(-55, -55.9, 0, 0);
//    FL8(-55, 42.22, 19.44, 0);
//    BR8(55, -67.78, 19.44, 0);
//    delay(tk2);
//
//    FR8(55, 53.85, 0, 0);
//    BL8(-55, -56.15, 0, 0);
//    FL8(-55, 41.03, 11.85, 0);
//    BR8(55, -68.97, 11.85, 0);
//    delay(tk2);
//
//    FR8(55, 53.75, 0, 0);
//    BL8(-55, -56.25, 0, 0);
//    FL8(-55, 40.27, 7.3, 0);
//    BR8(55, -69.73, 7.3, 0);
//    delay(tk2);
//
//    FR8(55, 53.65, 0, 0);
//    BL8(-55, -56.35, 0, 0);
//    FL8(-55, 40, 0, 0);
//    BR8(55, -70, 0, 0);
//    delay(tk2);
//
/////////////////////////////////////////////
//    FR8(55, 51.97, 0, 0);
//    BL8(-55, -58.03, 0, 0);
//    FL8(-55, 40.34, 0, 0);
//    BR8(55, -69.66, 0, 0);
//    delay(tk2);
//
//    FR8(55, 51.03, 0, 0);
//    BL8(-55, -58.97, 0, 0);
//    FL8(-55, 41.28, 0, 0);
//    BR8(55, -68.72, 0, 0);
//    delay(tk2);
//
//    FR8(55, 49.65, 0, 0);
//    BL8(-55, -60.35, 0, 0);
//    FL8(-55, 42.66, 0, 0);
//    BR8(55, -67.34, 0, 0);
//    delay(tk2);
//
//    FR8(55, 47.98, 0, 0);
//    BL8(-55, -62.02, 0, 0);
//    FL8(-55, 44.33, 0, 0);
//    BR8(55, -65.67, 0, 0);
//    delay(tk2);
//
//    FR8(55, 46.16, 0, 0);
//    BL8(-55, -63.84, 0, 0);
//    FL8(-55, 46.16, 0, 0);
//    BR8(55, -63.84, 0, 0);
//    delay(tk2);
//
//    FR8(55, 44.33, 0, 0);
//    BL8(-55, -65.67, 0, 0);
//    FL8(-55, 47.98, 0, 0);
//    BR8(55, -62.02, 0, 0);
//    delay(tk2);
//
//    FR8(55, 42.66, 0, 0);
//    BL8(-55, -67.34, 0, 0);
//    FL8(-55, 49.65, 0, 0);
//    BR8(55, -60.35, 0, 0);
//    delay(tk2);
//
//    FR8(55, 41.28, 0, 0);
//    BL8(-55, -68.72, 0, 0);
//    FL8(-55, 51.03, 0, 0);
//    BR8(55, -58.97, 0, 0);
//    delay(tk2);
//
//    FR8(55, 40.34, 0, 0);
//    BL8(-55, -69.66, 0, 0);
//    FL8(-55, 52.65, 0, 0);
//    BR8(55, -57.35, 0, 0);
//    delay(tk2);
//
////////////////////////////////////////////
//
//    FR8(55, 40, 0, 0);
//    BL8(-55, -70, 0, 0);
//    FL8(-55, 53.65, 0, 0);
//    BR8(55, -56.35, 0, 0);
//    delay(tk2);
//
//    FR8(55, 42.22, 19.44, 0);
//    BL8(-55, -67.78, 19.44, 0);
//    FL8(-55, 54.1, 0, 0);
//    BR8(55, -55.9, 0, 0);
//    delay(tk2);
//
//    FR8(55, 47.78, 31.11, 0);
//    BL8(-55, -62.22, 31.11, 0);
//    FL8(-55, 54.55, 0, 0);
//    BR8(55, -55.45, 0, 0);
//    delay(tk2);
//    movecounter = 0;
//  }
//}
//
//void kiridikitK3() {
//movecounter++;
//  if (movecounter == 1) {
//    FR8(55, 55, 35, 0);
//    BL8(-55, -55, 35, 0);
//    FL8(-55, 55, 0, 0);
//    BR8(55, -55, 0, 0);
//    delay(tk2);
//
//    FR8(55, 47.78, 31.11, 0);
//    BL8(-55, -62.22, 31.11, 0);
//    FL8(-55, 54.55, 0, 0);
//    BR8(55, -55.45, 0, 0);
//    delay(tk2);
//
//    FR8(55, 42.22, 19.44, 0);
//    BL8(-55, -67.78, 19.44, 0);
//    FL8(-55, 54.1, 0, 0);
//    BR8(55, -55.9, 0, 0);
//    delay(tk2);
//
//    FR8(55, 41.03, 11.85, 0);
//    BL8(-55, -68.97, 11.85, 0);
//    FL8(-55, 53.85, 0, 0);
//    BR8(55, -56.15, 0, 0);
//    delay(tk2);
//
//    FR8(55, 40.27, 7.3, 0);
//    BL8(-55, -69.73,7.3, 0);
//    FL8(-55, 53.75, 0, 0);
//    BR8(55, -56.25, 0, 0);
//    delay(tk2);
//
//    FR8(55, 40, 0, 0);
//    BL8(-55, -70, 0, 0);
//    FL8(-55, 53.65, 0, 0);
//    BR8(55, -56.35, 0, 0);
//    delay(tk2);
//
/////////////////////////////////////////////////
//
//    FR8(55, 40.34, 0, 0);
//    BL8(-55, -69.66, 0, 0);
//    FL8(-55, 51.97, 0, 0);
//    BR8(55, -58.03, 0, 0);
//    delay(tk2);
//
//    FR8(55, 41.28, 0, 0);
//    BL8(-55, -68.72, 0, 0);
//    FL8(-55, 51.03, 0, 0);
//    BR8(55, -58.97, 0, 0);
//    delay(tk2);
//
//    FR8(55, 42.66, 0, 0);
//    BL8(-55, -67.34, 0, 0);
//    FL8(-55, 49.65, 0, 0);
//    BR8(55, -60.35, 0, 0);
//    delay(tk2);
//
//    FR8(55, 44.33, 0, 0);
//    BL8(-55, -65.67, 0, 0);
//    FL8(-55, 47.98, 0, 0);
//    BR8(55, -62.02, 0, 0);
//    delay(tk2);
//
//    FR8(55, 46.16, 0, 0);
//    BL8(-55, -63.84, 0, 0);
//    FL8(-55, 46.16, 0, 0);
//    BR8(55, -63.84, 0, 0);
//    delay(tk2);
//
//    FR8(55, 47.98, 0, 0);
//    BL8(-55, -62.02, 0, 0);
//    FL8(-55, 44.33, 0, 0);
//    BR8(55, -65.67, 0, 0);
//    delay(tk2);
//
//    FR8(55, 49.65, 0, 0);
//    BL8(-55, -60.35, 0, 0);
//    FL8(-55, 42.66, 0, 0);
//    BR8(55, -67.34, 0, 0);
//    delay(tk2);
//
//    FR8(55, 51.03, 0, 0);
//    BL8(-55, -58.97, 0, 0);
//    FL8(-55, 41.28, 0, 0);
//    BR8(55, -68.72, 0, 0);
//    delay(tk2);
//
//    FR8(55, 52.65, 0, 0);
//    BL8(-55, -57.35, 0, 0);
//    FL8(-55, 40.34, 0, 0);
//    BR8(55, -69.66, 0, 0);
//    delay(tk2);
//    
/////////////////////////////////////////////////
//    FR8(55, 53.65, 0, 0);
//    BL8(-55, -56.35, 0, 0);
//    FL8(-55, 40, 0, 0);
//    BR8(55, -70, 0, 0);
//    delay(tk2);
////////////////////////////////////////////////
//
//    FR8(55, 54.1, 0, 0);
//    BL8(-55, -55.9, 0, 0);
//    FL8(-55, 42.22, 19.44, 0);
//    BR8(55, -67.78, 19.44, 0);
//    delay(tk2);
//
//    FR8(55, 54.55, 0, 0);
//    BL8(-55, -55.45, 0, 0);
//    FL8(-55, 47.78, 31.11, 0);
//    BR8(55, -62.22, 31.11, 0);
//    delay(tk2);
//  }
//  else if (movecounter == 2) {
//    FR8(55,  55, 0, 0);
//    BL8(-55, -55, 0, 0);
//    FL8(-55, 55, 35, 0);
//    BR8(55, -55, 35, 0);
//    delay(tk2);
//
//    FR8(55, 55.45, 0, 0);
//    BL8(-55, -54.55, 0, 0);
//    FL8(-55, 62.22, 31.11, 0);
//    BR8(55, -47.78, 31.11, 0);
//    delay(tk2);
//
//    FR8(55, 55.9, 0, 0);
//    BL8(-55, -54.1, 0, 0);
//    FL8(-55, 67.78, 19.44, 0);
//    BR8(55, -42.22, 19.44, 0);
//    delay(tk2);
//
//    FR8(55, 56.15, 0, 0);
//    BL8(-55, -53.85, 0, 0);
//    FL8(-55, 68.97, 11.85, 0);
//    BR8(55, -41.03, 11.85, 0);
//    delay(tk2);
//
//    FR8(55, 56.25, 0, 0);
//    BL8(-55, -53.75, 0, 0);
//    FL8(-55, 69.73, 7.3, 0);
//    BR8(55, -40.27, 7.3, 0);
//    delay(tk2);
//
//    FR8(55, 56.35, 0, 0);
//    BL8(-55, -53.65, 0, 0);
//    FL8(-55, 70, 0, 0);
//    BR8(55, -40, 0, 0);
//    delay(tk2);
//
/////////////////////////////////////////////
//    FR8(55, 58.03, 0, 0);
//    BL8(-55, -51.97, 0, 0);
//    FL8(-55, 69.66, 0, 0);
//    BR8(55, -40.34, 0, 0);
//    delay(tk2);
//
//    FR8(55, 58.97, 0, 0);
//    BL8(-55, -51.03, 0, 0);
//    FL8(-55, 68.72, 0, 0);
//    BR8(55, -41.28, 0, 0);
//    delay(tk2);
//
//    FR8(55, 60.35, 0, 0);
//    BL8(-55, -49.65, 0, 0);
//    FL8(-55, 67.34, 0, 0);
//    BR8(55, -42.66, 0, 0);
//    delay(tk2);
//
//    FR8(55, 62.02, 0, 0);
//    BL8(-55, -47.98, 0, 0);
//    FL8(-55, 65.67, 0, 0);
//    BR8(55, -44.33, 0, 0);
//    delay(tk2);
//
//    FR8(55, 63.84, 0, 0);
//    BL8(-55, -46.16, 0, 0);
//    FL8(-55, 63.84, 0, 0);
//    BR8(55, -46.16, 0, 0);
//    delay(tk2);
//
//    FR8(55, 65.67, 0, 0);
//    BL8(-55, -44.33, 0, 0);
//    FL8(-55, 62.02, 0, 0);
//    BR8(55, -47.98, 0, 0);
//    delay(tk2);
//
//    FR8(55, 67.34, 0, 0);
//    BL8(-55, -42.66, 0, 0);
//    FL8(-55, 60.35, 0, 0);
//    BR8(55, -49.65, 0, 0);
//    delay(tk2);
//
//    FR8(55, 68.72, 0, 0);
//    BL8(-55, -41.28, 0, 0);
//    FL8(-55, 58.97, 0, 0);
//    BR8(55, -51.03, 0, 0);
//    delay(tk2);
//
//    FR8(55, 69.66, 0, 0);
//    BL8(-55, -40.34, 0, 0);
//    FL8(-55, 57.35, 0, 0);
//    BR8(55, -52.65, 0, 0);
//    delay(tk2);
//
//    FR8(55, 70, 0, 0);
//    BL8(-55, -40, 0, 0);
//    FL8(-55, 56.35, 0, 0);
//    BR8(55, -53.65, 0, 0);
//    delay(tk2);
//
//    FR8(55, 67.78, 19.44, 0);
//    BL8(-55, -42.22, 19.44, 0);
//    FL8(-55, 55.9, 0, 0);
//    BR8(55, -54.1, 0, 0);
//    delay(tk2);
//
//    FR8(55, 62.22, 31.11, 0);
//    BL8(-55, -47.78, 31.11, 0);
//    FL8(-55, 55.45, 0, 0);
//    BR8(55, -54.55, 0, 0);
//    delay(tk2);
//    movecounter = 0;
//  }
//}
